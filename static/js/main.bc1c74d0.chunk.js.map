{"version":3,"sources":["MyContext.js","Registration/Registration.js","Login/Login.js","AddPostForm.js","Posts/Post.js","Posts/Posts.js","App.js","serviceWorker.js","MyProvider.js","index.js"],"names":["MyContext","createContext","Registration","state","username","password","confirmPassword","usernameError","passwordError","confirmPasswordError","inputChangeHandler","e","setState","target","name","value","register","axios","post","alert","id","className","type","onChange","this","onClick","React","Component","Login","login","trim","props","userCredential","AddPostForm","useState","textarea","setTextarea","rows","cols","newPost","user","_id","body","addPost","Post","Posts","currentPosts","useContext","posts","map","key","App","isLoggedIn","userLogin","logout","Fragment","Boolean","window","location","hostname","match","MyProvider","then","res","data","error","localStorage","setItem","JSON","stringify","removeItem","console","log","getItem","parse","Provider","children","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bc1c74d0.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst MyContext = createContext();\r\n\r\nexport default MyContext;","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass Registration extends React.Component {\r\n\r\n    state = {\r\n        username: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        usernameError: \"\",\r\n        passwordError: \"\",\r\n        confirmPasswordError: \"\"\r\n    }\r\n\r\n    inputChangeHandler = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    register = () => {\r\n        if(this.state.username === \"\") {\r\n            this.setState({\r\n                usernameError: \"This field is required\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                usernameError: \"\"\r\n            })\r\n        }\r\n        if(this.state.password === \"\") {\r\n            this.setState({\r\n                passwordError: \"This field is required\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                passwordError: \"\"\r\n            })\r\n        }\r\n        if(this.state.confirmPassword !== this.state.password) {\r\n            this.setState({\r\n                confirmPasswordError: \"Password didn't match\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                confirmPasswordError: \"\"\r\n            })\r\n        }\r\n        if((this.state.username !== \"\" && this.state.password !== \"\") && (this.state.confirmPassword === this.state.password)) {\r\n            axios.post(\"https://socialmedia-app-server.herokuapp.com/users\", {\r\n                username: this.state.username,\r\n                password: this.state.password\r\n            })\r\n            this.setState({\r\n                username: \"\",\r\n                password: \"\",\r\n                confirmPassword: \"\"\r\n            })\r\n            alert(\"Registration successful\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div id=\"registration-form\">\r\n                <h3>Register</h3>\r\n                <div className=\"form-input\">\r\n                    <label>Username: </label><input type=\"text\" name=\"username\" onChange={this.inputChangeHandler} value={this.state.username}/>\r\n                </div>\r\n                <div className=\"error-message\">\r\n                    <small>{this.state.usernameError}</small>\r\n                </div>\r\n                <div className=\"form-input\">\r\n                    <label>Password: </label><input type=\"password\" name=\"password\" onChange={this.inputChangeHandler} value={this.state.password}/>\r\n                </div>\r\n                <div className=\"error-message\">\r\n                    <small>{this.state.passwordError}</small>\r\n                </div>\r\n                <div className=\"form-input\">\r\n                    <label>Confirm Password: </label><input type=\"password\" name=\"confirmPassword\" onChange={this.inputChangeHandler} value={this.state.confirmPassword}/>\r\n                </div>\r\n                <div className=\"error-message\">\r\n                    <small>{this.state.confirmPasswordError}</small>\r\n                </div>\r\n                <button onClick={this.register}>Register</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Registration;","import React from \"react\";\r\n\r\nclass Login extends React.Component {\r\n\r\n    state = {\r\n        username: \"\",\r\n        password: \"\",\r\n        usernameError: \"\",\r\n        passwordError: \"\"\r\n    }\r\n\r\n    inputChangeHandler = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    login = () => {\r\n        if(this.state.username.trim() === \"\") {\r\n            this.setState({\r\n                usernameError: \"This field is required\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                usernameError: \"\"\r\n            })\r\n        }\r\n        if(this.state.password.trim() === \"\") {\r\n            this.setState({\r\n                passwordError: \"This field is required\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                passwordError: \"\"\r\n            })\r\n        }\r\n        if((this.state.username !== \"\") && (this.state.password !== \"\")) {\r\n            this.props.userCredential(this.state.username, this.state.password);\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div id=\"login-form\">\r\n                <h3>Login</h3>\r\n                <div className=\"form-input\">\r\n                    <label>Username: </label><input type=\"text\" name=\"username\" onChange={this.inputChangeHandler} value={this.state.username}/>\r\n                </div>\r\n                <div className=\"error-message\">\r\n                    <small>{this.state.usernameError}</small>\r\n                </div>\r\n                <div className=\"form-input\">\r\n                    <label>Password: </label><input type=\"password\" name=\"password\" onChange={this.inputChangeHandler} value={this.state.password}/>\r\n                </div>\r\n                <div className=\"error-message\">\r\n                    <small>{this.state.passwordError}</small>\r\n                </div>\r\n                <button onClick={this.login}>Login</button>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Login;","import React, { useState } from \"react\";\r\n\r\nconst AddPostForm = (props) => {\r\n\r\n    const [textarea, setTextarea] = useState(\"\");\r\n\r\n    let getPost = (e) => {\r\n        let newPost = e.target.value;\r\n        setTextarea(newPost);\r\n    }\r\n\r\n    let addPostHandler = () => {\r\n        let newPost = {\r\n            user: props.user._id,\r\n            body: textarea\r\n        }\r\n        props.addPost(newPost)\r\n    }\r\n\r\n    return(\r\n        <div id=\"post-form\">\r\n            <textarea id=\"post-here\" rows=\"5\" cols=\"40\" onChange={getPost}/>\r\n            <button onClick={addPostHandler}>Post</button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AddPostForm;","import React from \"react\";\r\n\r\nconst Post = (props) => {\r\n\r\n    return(\r\n        <div id=\"post\">\r\n            <div>{props.post.user.username}: <div id=\"post-body\">{props.post.body}</div></div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Post;","import React, { useContext } from \"react\";\r\nimport Post from \"./Post\";\r\nimport MyContext from \"../MyContext\";\r\n\r\nconst Posts = () => {\r\n\r\n    const {posts} = useContext(MyContext);\r\n\r\n    let currentPosts = posts.map(post => {\r\n        return(\r\n            <Post\r\n                key={post._id}\r\n                post={post}\r\n            />\r\n        )\r\n    })\r\n\r\n    return(\r\n        <div id=\"posts\">\r\n            <h2>Posts</h2>\r\n            {currentPosts}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Posts;","import React, { useContext } from 'react';\nimport './App.css';\nimport MyContext from \"./MyContext\";\nimport Registration from \"./Registration/Registration\";\nimport Login from \"./Login/Login\";\nimport AddPostForm from \"./AddPostForm\";\nimport Posts from \"./Posts/Posts\";\n\nconst App = () => {\n\n  const {\n    isLoggedIn,\n    userCredential,\n    userLogin,\n    logout,\n    user,\n    addPost\n  } = useContext(MyContext);\n\n  return (\n    <React.Fragment>\n      <h1>\n        Social Media App\n        {isLoggedIn ? <button onClick={logout}>Logout</button> : \"\"}\n      </h1>\n      <div className=\"App\">\n        {\n          isLoggedIn ?\n          <div>\n              <AddPostForm user={user} addPost={addPost}/>\n              <Posts/>\n          </div> :\n          <div>\n            <Registration/>\n            <Login userCredential={userCredential} userLogin={userLogin}/>\n          </div>\n        }\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport MyContext from \"./MyContext\";\r\nimport axios from \"axios\";\r\n\r\nclass MyProvider extends React.Component {\r\n\r\n    userLogin = () => {\r\n        this.setState({\r\n            isLoggedIn: true\r\n        })\r\n    }\r\n\r\n    userCredential = (username, password) => {\r\n        this.setState({\r\n            user: {\r\n                username: username,\r\n                password: password\r\n            }\r\n        })\r\n        axios.post(\"https://socialmedia-app-server.herokuapp.com/login\", {\r\n            username: username,\r\n            password: password\r\n        }).then(res => {\r\n            if(res.data.error) {\r\n                alert(\"Invalid username/password\");\r\n            } else {\r\n                localStorage.setItem(\"appUser\", JSON.stringify(res.data));\r\n                this.userLogin();\r\n            }\r\n        })\r\n    }\r\n\r\n    logout = () => {\r\n        localStorage.removeItem(\"appUser\");\r\n        this.setState({\r\n            isLoggedIn: false\r\n        })\r\n    }\r\n\r\n    addPost = (post) => {\r\n        axios.post(\"https://socialmedia-app-server.herokuapp.com/posts\", {\r\n            post: post\r\n        }).then(res => {\r\n            console.log(res.data);\r\n            this.setState({\r\n                posts: [...this.state.posts, res.data]\r\n            })\r\n        })\r\n    }\r\n\r\n    state = {\r\n        isLoggedIn: localStorage.getItem(\"appUser\") ? true : false,\r\n        user: JSON.parse(localStorage.getItem(\"appUser\")),\r\n        posts: [],\r\n        userLogin: this.userLogin,\r\n        userCredential: this.userCredential,\r\n        logout: this.logout,\r\n        addPost: this.addPost\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios(\"https://socialmedia-app-server.herokuapp.com/posts\")\r\n        .then(res => {\r\n            let posts = res.data;\r\n            this.setState({\r\n                posts: posts\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <MyContext.Provider value={this.state}>\r\n                {this.props.children}\r\n            </MyContext.Provider>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default MyProvider;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\nimport MyProvider from \"./MyProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyProvider>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </MyProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}